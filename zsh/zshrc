# Only continue if interactive shell
[[ $- != *i* ]] && return

### EDITOR
export EDITOR="nvim"
export VISUAL="nvim"
export MANPAGER="nvim +Man!"

### PATH
if [ -d "$HOME/.bin" ]; then
  PATH="$HOME/.bin:$PATH"
fi

if [ -d "$HOME/.local/bin" ]; then
  PATH="$HOME/.local/bin:$PATH"
fi

if [ -d "/opt/homebrew/bin" ]; then
  export HOMEBREW_NO_ANALYTICS=1
  PATH="/opt/homebrew/bin:$PATH"
fi

if command -v go &>/dev/null; then
  PATH="/usr/local/go/bin:$HOME/go/bin:$PATH"
fi

if [ -d "/usr/local/opt/openjdk/bin" ]; then
  PATH="/usr/local/opt/openjdk/bin:$PATH"
fi

# place python `pip install --user` scripts in ~/.local/bin
export PYTHONUSERBASE="$HOME/.local"

### CONFIG STORAGE
if [ -z "$XDG_CONFIG_HOME" ]; then
    export XDG_CONFIG_HOME="$HOME/.config"
fi
if [ -z "$XDG_DATA_HOME" ]; then
    export XDG_DATA_HOME="$HOME/.local/share"
fi
if [ -z "$XDG_CACHE_HOME" ]; then
    export XDG_CACHE_HOME="$HOME/.cache"
fi

### HISTORY
HISTSIZE=1000
SAVEHIST=1000
HISTFILE="$XDG_DATA_HOME/zsh/history"

export HISTORY_IGNORE="(ls|cd|pwd|exit|sudo reboot|history|cd -|cd ..|SECRET_*)"

setopt inc_append_history
setopt share_history

### AUTO COMPLETION

# Do not store zcompdump files in $HOME
export ZSH_COMPDUMP="$XDG_DATA_HOME/zsh/zcompdump-$HOST"

autoload -U compinit && compinit -u
zstyle ':completion:*' menu select
# Auto complete with case insenstivity
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

zmodload zsh/complist
compinit
_comp_options+=(globdots) # Include hidden files.

# Plugins
source "$XDG_CONFIG_HOME/zsh/plugins/zsh-autopair/autopair.zsh"
source "$XDG_CONFIG_HOME/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
source "$XDG_CONFIG_HOME/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"

### VI MODE
bindkey -v
export KEYTIMEOUT=1

# Edit line in vim buffer ctrl-v
autoload edit-command-line; zle -N edit-command-line
bindkey '^v' edit-command-line
# Enter vim buffer from normal mode
autoload -U edit-command-line && zle -N edit-command-line && bindkey -M vicmd "^v" edit-command-line

# Fix backspace bug when switching modes
bindkey "^?" backward-delete-char

# Change cursor shape for different vi modes.
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select

# ci", ci', ci`, di", etc
autoload -U select-quoted
zle -N select-quoted
for m in visual viopp; do
  for c in {a,i}{\',\",\`}; do
    bindkey -M $m $c select-quoted
  done
done

# ci{, ci(, ci<, di{, etc
autoload -U select-bracketed
zle -N select-bracketed
for m in visual viopp; do
  for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
    bindkey -M $m $c select-bracketed
  done
done

# vim like cursor
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
precmd() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

### KEYBINDINGS
bindkey '^a' beginning-of-line
bindkey '^e' end-of-line

bindkey '^f' autosuggest-accept
bindkey '^i' expand-or-complete-prefix

### SEARCH
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey '^p' up-line-or-beginning-search
bindkey '^n' down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search
bindkey "^[[B" down-line-or-beginning-search

### PROMPT
autoload -U colors && colors

if [[ -n "$SSH_CLIENT" ]]; then
  ZSH_PROMPT_HOST="%{$fg[yellow]%}%m "
fi

# Customized git status
ZSH_PROMPT_GIT_STATUS() {
  local git_branch is_dirty
  git_branch="$(git symbolic-ref --quiet --short HEAD 2> /dev/null)"
  if [[ -n $git_branch ]]; then
    is_dirty="$(git status --porcelain --untracked-files=no 2>/dev/null | tail -n 1)"
    if [[ -n "$is_dirty" ]]; then
      echo "%{$fg[white]%}[$git_branch] %{$fg[red]%}✗"
    else
      echo "%{$fg[white]%}[$git_branch] %{$fg[green]%}✔"
    fi
  fi
}

setopt prompt_subst

PROMPT='%{$fg[cyan]%}[$ZSH_PROMPT_HOST%{$fg[cyan]%}%~%{$fg[cyan]%}]$(ZSH_PROMPT_GIT_STATUS) '

### FZF

export FZF_DEFAULT_OPTS="--reverse \
  --border rounded \
  --no-info \
  --pointer='' \
  --marker=' ' \
  --ansi \
  --color='16,bg+:-1,gutter:-1,prompt:4,pointer:5,marker:6,border:7'"

export FZF_CTRL_R_OPTS="--border-label=' history ' --prompt='  '"

export FZF_CTRL_T_OPTS="--border-label=' files ' --prompt='  '"

__fzfcmd() {
  [ -n "${TMUX_PANE-}" ] && { [ "${FZF_TMUX:-0}" != 0 ] || [ -n "${FZF_TMUX_OPTS-}" ]; } &&
    echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzf"
}

# CTRL-T - Paste the selected file path(s) into the command line
__fsel() {
  setopt localoptions pipefail no_aliases 2> /dev/null
  local item
  fd --type f \
    --hidden \
    --follow \
    --exclude .git \
    --exclude node_modules \
    | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --bind=ctrl-z:ignore ${FZF_DEFAULT_OPTS-} ${FZF_CTRL_T_OPTS-}" $(__fzfcmd) -m "$@" | while read item; do
    echo -n "${(q)item} "
  done
  local ret=$?
  echo
  return $ret
}

fzf-file-widget() {
  LBUFFER="${LBUFFER}$(__fsel)"
  local ret=$?
  zle reset-prompt
  return $ret
}

zle     -N            fzf-file-widget
bindkey -M vicmd '^T' fzf-file-widget
bindkey -M viins '^T' fzf-file-widget

# CTRL-R - Paste the selected command from history into the command line
fzf-history-widget() {
  local selected num
  setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases 2> /dev/null
  selected=( $(fc -rl 0 | awk '{ cmd=$0; sub(/^[ \t]*[0-9]+\**[ \t]+/, "", cmd); if (!seen[cmd]++) print $0 }' |
    FZF_DEFAULT_OPTS="-n2..,.. --scheme=history --bind=ctrl-r:toggle-sort,ctrl-z:ignore --query=${(qqq)LBUFFER} +m ${FZF_DEFAULT_OPTS-} ${FZF_CTRL_R_OPTS-}" $(__fzfcmd)) )
  local ret=$?
  if [ -n "$selected" ]; then
    num=$selected[1]
    if [ -n "$num" ]; then
      zle vi-fetch-history -n $num
    fi
  fi
  zle reset-prompt
  return $ret
}

zle     -N            fzf-history-widget
bindkey -M vicmd '^R' fzf-history-widget
bindkey -M viins '^R' fzf-history-widget

### STUFF
if [ -f "/usr/lib/google-cloud-sdk/completion.bash.inc" ]; then
  gcloud() {
    unset -f gcloud

    # This enables shell command completion for gcloud.
    # load bash completion functionality
    autoload bashcompinit
    bashcompinit
    source "/usr/lib/google-cloud-sdk/completion.bash.inc"

    gcloud $@
  }
fi

if [ -f "/usr/bin/terraform" ]; then
  terraform() {
    unset -f terraform

    # This enables shell command completion for terraform.
    # load bash completion functionality
    autoload -U +X bashcompinit && bashcompinit
    complete -o nospace -C /usr/bin/terraform terraform

    terraform $@
  }
fi

# Node Version Manager
if [ -s "$HOME/.nvm/nvm.sh" ]; then
  export NVM_DIR="$HOME/.nvm"

  function () {
    local nvm_default_alias nvm_default_path
    nvm_default_alias=$(< "$NVM_DIR/alias/default")

    # recursively follow the alias until it no longer resolves to a file
    while [ -f "$NVM_DIR/alias/$nvm_default_alias" ]; do
      nvm_default_alias=$(< "$NVM_DIR/alias/$nvm_default_alias")
    done

    nvm_default_path="$NVM_DIR/versions/node/$nvm_default_alias/bin"
    if ! [ -d $nvm_default_path ]; then
      # fallback to loading nvm the old way
      echo "slow loading nvm"
      \. "$NVM_DIR/nvm.sh"
    elif; then
      export PATH="$PATH:$nvm_default_path"

      # lazy load nvm
      nvm() {
        unset -f nvm
        export PATH=$(echo $PATH | sed -e "s#:$nvm_default_path##")
        \. "$NVM_DIR/nvm.sh"
        nvm $@
      }
    fi
  }
fi

if [ -d "$HOME/.pyenv" ]; then
  export PATH="$HOME/.pyenv/bin:$PATH"
  eval "$(pyenv init -)"
fi

if command -v direnv &>/dev/null; then
  eval "$(direnv hook zsh)"
fi

# fix ssh-agent forwarding for tmux
if [[ -n "$SSH_CONNECTION" && -n "$TMUX" ]]; then
  export SSH_AUTH_SOCK="$HOME/.ssh/ssh_auth_sock"
fi

### ALIASES
alias ls='ls --color=tty'
alias l='ls -lFh'     #size,show type,human readable
alias la='ls -lAFh'   #long list,show almost all,show type,human readable

alias grep='grep --color=tty'
alias egrep='egrep --color=tty'
alias fgrep='fgrep --color=tty'

# nvim
alias v="nvim"

# tmux
alias ta='tmux attach -t'
alias tn='tmux new -s $(basename $(pwd))'
alias t="$XDG_CONFIG_HOME/tmux/plugins/t-smart-tmux-session-manager/bin/t"
alias tl='tmux list-sessions'
