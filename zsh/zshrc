# Only continue if interactive shell
[[ $- != *i* ]] && return

### EDITOR
export EDITOR="nvim"
export VISUAL="nvim"
export MANPAGER="nvim +Man!"

### PATH
if [ -d "$HOME/.bin" ]; then
  PATH="$HOME/.bin:$PATH"
fi

if [ -d "$HOME/.local/bin" ]; then
  PATH="$HOME/.local/bin:$PATH"
fi

if [ -d "/opt/homebrew/bin" ]; then
  PATH="/opt/homebrew/bin:$PATH"
fi

if [ -d "/usr/local/go/bin" ]; then
  PATH="/usr/local/go/bin:$HOME/go/bin:$PATH"
fi

### CONFIG STORAGE
if [ -z "$XDG_CONFIG_HOME" ]; then
    export XDG_CONFIG_HOME="$HOME/.config"
fi
if [ -z "$XDG_DATA_HOME" ]; then
    export XDG_DATA_HOME="$HOME/.local/share"
fi
if [ -z "$XDG_CACHE_HOME" ]; then
    export XDG_CACHE_HOME="$HOME/.cache"
fi

### HISTORY
HISTSIZE=1000
SAVEHIST=1000
HISTFILE="$XDG_DATA_HOME/zsh/history"

export HISTORY_IGNORE="(ls|cd|pwd|exit|sudo reboot|history|cd -|cd ..|SECRET_*)"

setopt inc_append_history
setopt share_history

### AUTO COMPLETION

# Do not store zcompdump files in $HOME
export ZSH_COMPDUMP="$XDG_DATA_HOME/zsh/zcompdump-$HOST"

autoload -U compinit && compinit -u
zstyle ':completion:*' menu select
# Auto complete with case insenstivity
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

zmodload zsh/complist
compinit
_comp_options+=(globdots) # Include hidden files.

### KEYBINDINGS
bindkey '^p' up-history
bindkey '^n' down-history
bindkey '^a' beginning-of-line
bindkey '^e' end-of-line

### VI MODE
bindkey -v
export KEYTIMEOUT=1

# Edit line in vim buffer ctrl-v
autoload edit-command-line; zle -N edit-command-line
bindkey '^v' edit-command-line
# Enter vim buffer from normal mode
autoload -U edit-command-line && zle -N edit-command-line && bindkey -M vicmd "^v" edit-command-line

# Fix backspace bug when switching modes
bindkey "^?" backward-delete-char

# Change cursor shape for different vi modes.
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select

# ci", ci', ci`, di", etc
autoload -U select-quoted
zle -N select-quoted
for m in visual viopp; do
  for c in {a,i}{\',\",\`}; do
    bindkey -M $m $c select-quoted
  done
done

# ci{, ci(, ci<, di{, etc
autoload -U select-bracketed
zle -N select-bracketed
for m in visual viopp; do
  for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
    bindkey -M $m $c select-bracketed
  done
done

# vim like cursor
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
precmd() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

### PROMPT
autoload -U colors && colors

if [[ -n "$SSH_CLIENT" ]]; then
  ZSH_PROMPT_HOST="%{$fg[yellow]%}%m "
fi

# Customized git status
ZSH_PROMPT_GIT_STATUS() {
  BRANCH="$(git symbolic-ref --quiet --short HEAD 2> /dev/null)"
  if [ $? -eq 0 ]; then
    STATUS="$(git status --porcelain --untracked-files=no 2>/dev/null | tail -n 1)"
    if [[ -n "$STATUS" ]]; then
      echo "%{$fg[white]%}[$BRANCH] %{$fg[red]%}✗"
    else
      echo "%{$fg[white]%}[$BRANCH] %{$fg[green]%}✔"
    fi
  fi
}

setopt prompt_subst

PROMPT='%{$fg[cyan]%}[$ZSH_PROMPT_HOST%{$fg[cyan]%}%~%{$fg[cyan]%}]$(ZSH_PROMPT_GIT_STATUS) '

### FZF

# CTRL-T - Paste the selected file path(s) into the command line
__fsel() {
  setopt localoptions pipefail no_aliases 2> /dev/null
  local item
  fd --type f \
    --hidden \
    --follow \
    --exclude .git \
    --exclude node_modules \
    | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --border --bind=ctrl-z:ignore ${FZF_DEFAULT_OPTS-} ${FZF_CTRL_T_OPTS-}" $(__fzfcmd) -m "$@" | while read item; do
    echo -n "${(q)item} "
  done
  local ret=$?
  echo
  return $ret
}
__fzfcmd() {
  [ -n "${TMUX_PANE-}" ] && { [ "${FZF_TMUX:-0}" != 0 ] || [ -n "${FZF_TMUX_OPTS-}" ]; } &&
    echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzf"
}

fzf-file-widget() {
  LBUFFER="${LBUFFER}$(__fsel)"
  local ret=$?
  zle reset-prompt
  return $ret
}
zle     -N            fzf-file-widget
bindkey -M vicmd '^T' fzf-file-widget
bindkey -M viins '^T' fzf-file-widget

# CTRL-R - Paste the selected command from history into the command line
fzf-history-widget() {
  local selected num
  setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases 2> /dev/null
  selected=( $(fc -rl 1 | awk '{ cmd=$0; sub(/^[ \t]*[0-9]+\**[ \t]+/, "", cmd); if (!seen[cmd]++) print $0 }' |
    FZF_DEFAULT_OPTS="--height 40% --reverse -n2..,.. --scheme=history --bind=ctrl-r:toggle-sort,ctrl-z:ignore --query=${(qqq)LBUFFER} +m" $(__fzfcmd)) )
  local ret=$?
  if [ -n "$selected" ]; then
    num=$selected[1]
    if [ -n "$num" ]; then
      zle vi-fetch-history -n $num
    fi
  fi
  zle reset-prompt
  return $ret
}
zle     -N            fzf-history-widget
bindkey -M vicmd '^R' fzf-history-widget
bindkey -M viins '^R' fzf-history-widget

### STUFF
if [ -f "/usr/lib/google-cloud-sdk/completion.bash.inc" ]; then
  gcloud() {
    unset -f gcloud

    # This enables shell command completion for gcloud.
    # load bash completion functionality
    autoload bashcompinit
    bashcompinit
    source "/usr/lib/google-cloud-sdk/completion.bash.inc"

    gcloud $@
  }
fi

if [ -f "/usr/bin/terraform" ]; then
  terraform() {
    unset -f terraform

    # This enables shell command completion for terraform.
    # load bash completion functionality
    autoload -U +X bashcompinit && bashcompinit
    complete -o nospace -C /usr/bin/terraform terraform

    terraform $@
  }
fi

# Node Version Manager
export NVM_DIR="$HOME/.nvm"

if [ -s "$NVM_DIR/nvm.sh" ]; then
  NVIM_DEFAULT_ALIAS=$(< "$NVM_DIR/alias/default")

  # recursively follow the alias until it no longer resolves to a file
  while [ -f "$NVM_DIR/alias/$NVIM_DEFAULT_ALIAS" ]; do
    NVIM_DEFAULT_ALIAS=$(< "$NVM_DIR/alias/$NVIM_DEFAULT_ALIAS")
  done

  NVIM_DEFAULT_PATH="$NVM_DIR/versions/node/$NVIM_DEFAULT_ALIAS/bin"
  if ! [ -d $NVIM_DEFAULT_PATH ]; then
    # fallback to loading nvim the old way
    echo "slow loading nvm"
    \. "$NVM_DIR/nvm.sh"
  elif; then
    export PATH="$PATH:$NVIM_DEFAULT_PATH"

    # lazy load nvm
    nvm() {
      unset -f nvm
      export PATH=$(echo $PATH | sed -e "s#:$NVIM_DEFAULT_PATH##")
      \. "$NVM_DIR/nvm.sh"
      nvm $@
    }
  fi
fi

if [ -d "$HOME/.pyenv" ]; then
  export PATH="$HOME/.pyenv/bin:$PATH"
  eval "$(pyenv init -)"
fi

if command -v direnv &>/dev/null; then
  eval "$(direnv hook zsh)"
fi

# fix ssh-agent forwarding for tmux
if [[ -n "$SSH_CONNECTION" && -n "$TMUX" ]]; then
  export SSH_AUTH_SOCK="$HOME/.ssh/ssh_auth_sock"
fi

### ALIASES
alias ls='ls --color=tty'
alias l='ls -lFh'     #size,show type,human readable
alias la='ls -lAFh'   #long list,show almost all,show type,human readable

alias grep='grep --color=tty'
alias egrep='egrep --color=tty'
alias fgrep='fgrep --color=tty'

# nvim
alias v="nvim"

# tmux
alias ta='tmux attach -t'
alias tn='tmux new -s $(basename $(pwd))'
alias t="$XDG_CONFIG_HOME/tmux/plugins/t-smart-tmux-session-manager/bin/t"
alias tl='tmux list-sessions'

# Plugins
source "$XDG_CONFIG_HOME/zsh/plugins/zsh-autopair/autopair.zsh"
source "$XDG_CONFIG_HOME/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
source "$XDG_CONFIG_HOME/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
bindkey '^f' autosuggest-accept
bindkey '^i' expand-or-complete-prefix
